pipeline {
    agent any
    environment {
        PATH = "${env.PATH}:/opt/sonarqube/bin:/opt/sonar-scanner-6.2.1.4610-linux-x64/bin"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip install pytest'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'python3 -m pytest test_addition.py'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(installationName: 'SonarQubeManual1', credentialsId: 'sonar-api') {
                    sh '''
                        sonar-scanner \
                            -Dsonar.projectKey=SonarQubeManual1 \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.login=squ_cfa313a59eb8fd2db65f41f5f7f5bbb1731f3750
                        '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    withSonarQubeEnv(installationName:'SonarQubeManual1', credentialsId: 'sonar-api') {
                        def maxRetries = 30
                        def retryCount = 0
                        def waitTime = 60 // seconds
                        def qgStatus = 'IN_PROGRESS'

                        while (qgStatus == 'IN_PROGRESS' && retryCount < maxRetries) {
                            echo "Hello"
                            def qg = waitForQualityGate()
                            qgStatus = qg.status
                            echo "Quality gate status: ${qgStatus}"
                            if (qgStatus == 'OK') {
                                echo "Quality gate passed."
                            } else if (qgStatus == 'ERROR') {
                                error "Pipeline aborted due to quality gate failure: ${qgStatus}"
                            } else {
                                retryCount++
                                echo "Quality gate status: ${qgStatus}. Retrying in ${waitTime} seconds... (Attempt ${retryCount}/${maxRetries})"
                                sleep(waitTime)
                            }
                        }

                        if (qgStatus == 'IN_PROGRESS') {
                            error "Pipeline aborted due to quality gate check timeout."
                        }
                    }
                }
            }
        }
    }
}